package com.blackhole.entities;
// Generated Mar 1, 2019 9:23:01 PM by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SecondaryTables;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.springframework.format.annotation.DateTimeFormat;

/**
 * Employeeaccount generated by hbm2java
 */
@Entity
@Table(name = "employeeaccount")
//@SecondaryTables
public class EmployeeAccount implements java.io.Serializable {

	/**
	 *
	 */
	private static final long serialVersionUID = 1L;
	private Integer empId;
	private EmployeeAccount employeeaccountByInActiveBy;
	private EmployeeAccount employeeaccountByCreateBy;

	private Role role;
	private String empEmail;
	private String empPassword;
	private String empFullName;
	 @DateTimeFormat(pattern = "yyyy-MM-dd")
	private Date empDob;
	private String empImage;
	private String empAddress;
	private String empPhone;
	private String empIdentityNumber;
	 @DateTimeFormat(pattern = "yyyy-MM-dd")
	private Date createDate;
	private boolean isActive;

	private Set<PartnerAccount> partneraccounts = new HashSet<PartnerAccount>(0);
	private Set<EmployeeManageFservice> employeemanagefservicesForEmpManageId = new HashSet<EmployeeManageFservice>(0);
	private Set<QnA> qnas = new HashSet<QnA>(0);
	private Set<WorkingArea> workingareasForInActiveBy = new HashSet<WorkingArea>(0);

	//List of Staffs is created to  manage field services
	private Set<EmployeeManageFservice> employeemanagefservicesForCreateBy = new HashSet<EmployeeManageFservice>(0);

	private Set<FieldService> fieldservices = new HashSet<FieldService>(0);

	private Set<EmployeeManageFservice> employeemanagefservicesForInActiveBy = new HashSet<EmployeeManageFservice>(0);
	private Set<ServicePost> serviceposts = new HashSet<ServicePost>(0);

	private Set<RoleFunction> rolefunctionsForCreateBy = new HashSet<RoleFunction>(0);

	private Set<EmployeeAccount> employeeaccountsForInActiveBy = new HashSet<EmployeeAccount>(0);
	private Set<DetailService> detailservices = new HashSet<DetailService>(0);
	private Set<ServicePostDetail> servicepostdetails = new HashSet<ServicePostDetail>(0);
	private Set<RoleFunction> rolefunctionsForInActiveBy = new HashSet<RoleFunction>(0);
	private Set<WorkingArea> workingareasForAcceptBy = new HashSet<WorkingArea>(0);
	private Set<EmployeeAccount> employeeaccountsForCreateBy = new HashSet<EmployeeAccount>(0);
	private Set<WebDataContent> webdatacontents = new HashSet<WebDataContent>(0);

	public EmployeeAccount() {
	}

	@Override
	public String toString(){
		return "Name : " + this.getEmpFullName() +
				"\n ID : "+this.getEmpId() +
				"\n DOB :"+this.getEmpDob() +
				"\n Image : "+ this.getEmpImage() +
				"\n Create Date : " + this.getCreateDate()+
				"\n Is Active : "+this.isIsActive() +
				"\n Create By : " + this.getEmployeeaccountByCreateBy().getEmpId()+
				 "\n Role : "+this.getRole().getRoleId().toString();

	}

	public EmployeeAccount(EmployeeAccount employeeaccountByCreateBy, Role role, String empEmail, String empPassword,
			String empFullName, Date empDob, String empAddress, String empPhone, String empIdentityNumber,
			Date createDate, boolean isActive) {
		this.employeeaccountByCreateBy = employeeaccountByCreateBy;
		this.role = role;
		this.empEmail = empEmail;
		this.empPassword = empPassword;
		this.empFullName = empFullName;
		this.empDob = empDob;
		this.empAddress = empAddress;
		this.empPhone = empPhone;
		this.empIdentityNumber = empIdentityNumber;
		this.createDate = createDate;
		this.isActive = isActive;
	}

	public EmployeeAccount(EmployeeAccount employeeaccountByInActiveBy, EmployeeAccount employeeaccountByCreateBy,
			Role role, String empEmail, String empPassword, String empFullName, Date empDob, String empImage,
			String empAddress, String empPhone, String empIdentityNumber, Date createDate, boolean isActive,
			Set<PartnerAccount> partneraccounts, Set<EmployeeManageFservice> employeemanagefservicesForEmpManageId,
			Set<QnA> qnas, Set<WorkingArea> workingareasForInActiveBy,
			Set<EmployeeManageFservice> employeemanagefservicesForCreateBy, Set<FieldService> fieldservices,
			Set<EmployeeManageFservice> employeemanagefservicesForInActiveBy, Set<ServicePost> serviceposts,
			Set<RoleFunction> rolefunctionsForCreateBy, Set<EmployeeAccount> employeeaccountsForInActiveBy,
			Set<DetailService> detailservices, Set<ServicePostDetail> servicepostdetails,
			Set<RoleFunction> rolefunctionsForInActiveBy, Set<WorkingArea> workingareasForAcceptBy,
			Set<EmployeeAccount> employeeaccountsForCreateBy, Set<WebDataContent> webdatacontents) {
		this.employeeaccountByInActiveBy = employeeaccountByInActiveBy;
		this.employeeaccountByCreateBy = employeeaccountByCreateBy;
		this.role = role;
		this.empEmail = empEmail;
		this.empPassword = empPassword;
		this.empFullName = empFullName;
		this.empDob = empDob;
		this.empImage = empImage;
		this.empAddress = empAddress;
		this.empPhone = empPhone;
		this.empIdentityNumber = empIdentityNumber;
		this.createDate = createDate;
		this.isActive = isActive;
		this.partneraccounts = partneraccounts;
		this.employeemanagefservicesForEmpManageId = employeemanagefservicesForEmpManageId;
		this.qnas = qnas;
		this.workingareasForInActiveBy = workingareasForInActiveBy;
		this.employeemanagefservicesForCreateBy = employeemanagefservicesForCreateBy;
		this.fieldservices = fieldservices;
		this.employeemanagefservicesForInActiveBy = employeemanagefservicesForInActiveBy;
		this.serviceposts = serviceposts;
		this.rolefunctionsForCreateBy = rolefunctionsForCreateBy;
		this.employeeaccountsForInActiveBy = employeeaccountsForInActiveBy;
		this.detailservices = detailservices;
		this.servicepostdetails = servicepostdetails;
		this.rolefunctionsForInActiveBy = rolefunctionsForInActiveBy;
		this.workingareasForAcceptBy = workingareasForAcceptBy;
		this.employeeaccountsForCreateBy = employeeaccountsForCreateBy;
		this.webdatacontents = webdatacontents;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "EmpID", unique = true, nullable = false)
	public Integer getEmpId() {
		return this.empId;
	}

	public void setEmpId(Integer empId) {
		this.empId = empId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "InActiveBy")
	public EmployeeAccount getEmployeeaccountByInActiveBy() {
		return this.employeeaccountByInActiveBy;
	}

	public void setEmployeeaccountByInActiveBy(EmployeeAccount employeeaccountByInActiveBy) {
		this.employeeaccountByInActiveBy = employeeaccountByInActiveBy;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CreateBy", nullable = false)
	public EmployeeAccount getEmployeeaccountByCreateBy() {
		return this.employeeaccountByCreateBy;
	}

	public void setEmployeeaccountByCreateBy(EmployeeAccount employeeaccountByCreateBy) {
		this.employeeaccountByCreateBy = employeeaccountByCreateBy;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "RoleID", nullable = false)
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@Column(name = "EmpEmail", nullable = false, length = 100)
	public String getEmpEmail() {
		return this.empEmail;
	}

	public void setEmpEmail(String empEmail) {
		this.empEmail = empEmail;
	}

	@Column(name = "EmpPassword", nullable = false, length = 100)
	public String getEmpPassword() {
		return this.empPassword;
	}

	public void setEmpPassword(String empPassword) {
		this.empPassword = empPassword;
	}

	@Column(name = "EmpFullName", nullable = false, length = 100)
	public String getEmpFullName() {
		return this.empFullName;
	}

	public void setEmpFullName(String empFullName) {
		this.empFullName = empFullName;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "EmpDOB", nullable = false, length = 10)
	public Date getEmpDob() {
		return this.empDob;
	}

	public void setEmpDob(Date empDob) {
		this.empDob = empDob;
	}

	@Column(name = "EmpImage", length = 200)
	public String getEmpImage() {
		return this.empImage;
	}

	public void setEmpImage(String empImage) {
		this.empImage = empImage;
	}

	@Column(name = "EmpAddress", nullable = false, length = 200)
	public String getEmpAddress() {
		return this.empAddress;
	}

	public void setEmpAddress(String empAddress) {
		this.empAddress = empAddress;
	}

	@Column(name = "EmpPhone", nullable = false, length = 20)
	public String getEmpPhone() {
		return this.empPhone;
	}

	public void setEmpPhone(String empPhone) {
		this.empPhone = empPhone;
	}

	@Column(name = "EmpIdentityNumber", nullable = false, length = 20)
	public String getEmpIdentityNumber() {
		return this.empIdentityNumber;
	}

	public void setEmpIdentityNumber(String empIdentityNumber) {
		this.empIdentityNumber = empIdentityNumber;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CreateDate", nullable = false, length = 19)
	public Date getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Date createDate) {
		this.createDate = createDate;
	}

	@Column(name = "IsActive", nullable = false)
	public boolean isIsActive() {
		return this.isActive;
	}

	public void setIsActive(boolean isActive) {
		this.isActive = isActive;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccount")
	public Set<PartnerAccount> getPartneraccounts() {
		return this.partneraccounts;
	}

	public void setPartneraccounts(Set<PartnerAccount> partneraccounts) {
		this.partneraccounts = partneraccounts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccountByEmpManageId")
	public Set<EmployeeManageFservice> getEmployeemanagefservicesForEmpManageId() {
		return this.employeemanagefservicesForEmpManageId;
	}

	public void setEmployeemanagefservicesForEmpManageId(
			Set<EmployeeManageFservice> employeemanagefservicesForEmpManageId) {
		this.employeemanagefservicesForEmpManageId = employeemanagefservicesForEmpManageId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccount")
	public Set<QnA> getQnas() {
		return this.qnas;
	}

	public void setQnas(Set<QnA> qnas) {
		this.qnas = qnas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccountByInActiveBy")
	public Set<WorkingArea> getWorkingareasForInActiveBy() {
		return this.workingareasForInActiveBy;
	}

	public void setWorkingareasForInActiveBy(Set<WorkingArea> workingareasForInActiveBy) {
		this.workingareasForInActiveBy = workingareasForInActiveBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccountByCreateBy")
	public Set<EmployeeManageFservice> getEmployeemanagefservicesForCreateBy() {
		return this.employeemanagefservicesForCreateBy;
	}

	public void setEmployeemanagefservicesForCreateBy(Set<EmployeeManageFservice> employeemanagefservicesForCreateBy) {
		this.employeemanagefservicesForCreateBy = employeemanagefservicesForCreateBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccount")
	public Set<FieldService> getFieldservices() {
		return this.fieldservices;
	}

	public void setFieldservices(Set<FieldService> fieldservices) {
		this.fieldservices = fieldservices;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccountByInActiveBy")
	public Set<EmployeeManageFservice> getEmployeemanagefservicesForInActiveBy() {
		return this.employeemanagefservicesForInActiveBy;
	}

	public void setEmployeemanagefservicesForInActiveBy(
			Set<EmployeeManageFservice> employeemanagefservicesForInActiveBy) {
		this.employeemanagefservicesForInActiveBy = employeemanagefservicesForInActiveBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccount")
	public Set<ServicePost> getServiceposts() {
		return this.serviceposts;
	}

	public void setServiceposts(Set<ServicePost> serviceposts) {
		this.serviceposts = serviceposts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccountByCreateBy")
	public Set<RoleFunction> getRolefunctionsForCreateBy() {
		return this.rolefunctionsForCreateBy;
	}

	public void setRolefunctionsForCreateBy(Set<RoleFunction> rolefunctionsForCreateBy) {
		this.rolefunctionsForCreateBy = rolefunctionsForCreateBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccountByInActiveBy")
	public Set<EmployeeAccount> getEmployeeaccountsForInActiveBy() {
		return this.employeeaccountsForInActiveBy;
	}

	public void setEmployeeaccountsForInActiveBy(Set<EmployeeAccount> employeeaccountsForInActiveBy) {
		this.employeeaccountsForInActiveBy = employeeaccountsForInActiveBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccount")
	public Set<DetailService> getDetailservices() {
		return this.detailservices;
	}

	public void setDetailservices(Set<DetailService> detailservices) {
		this.detailservices = detailservices;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccount")
	public Set<ServicePostDetail> getServicepostdetails() {
		return this.servicepostdetails;
	}

	public void setServicepostdetails(Set<ServicePostDetail> servicepostdetails) {
		this.servicepostdetails = servicepostdetails;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccountByInActiveBy")
	public Set<RoleFunction> getRolefunctionsForInActiveBy() {
		return this.rolefunctionsForInActiveBy;
	}

	public void setRolefunctionsForInActiveBy(Set<RoleFunction> rolefunctionsForInActiveBy) {
		this.rolefunctionsForInActiveBy = rolefunctionsForInActiveBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccountByAcceptBy")
	public Set<WorkingArea> getWorkingareasForAcceptBy() {
		return this.workingareasForAcceptBy;
	}

	public void setWorkingareasForAcceptBy(Set<WorkingArea> workingareasForAcceptBy) {
		this.workingareasForAcceptBy = workingareasForAcceptBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccountByCreateBy")
	public Set<EmployeeAccount> getEmployeeaccountsForCreateBy() {
		return this.employeeaccountsForCreateBy;
	}

	public void setEmployeeaccountsForCreateBy(Set<EmployeeAccount> employeeaccountsForCreateBy) {
		this.employeeaccountsForCreateBy = employeeaccountsForCreateBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employeeaccount")
	public Set<WebDataContent> getWebdatacontents() {
		return this.webdatacontents;
	}

	public void setWebdatacontents(Set<WebDataContent> webdatacontents) {
		this.webdatacontents = webdatacontents;
	}

}
