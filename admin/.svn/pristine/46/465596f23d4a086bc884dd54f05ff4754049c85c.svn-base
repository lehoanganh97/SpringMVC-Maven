package com.blackhole.controllers;

import java.sql.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.blackhole.entities.EmployeeAccount;
import com.blackhole.entities.FieldService;
import com.blackhole.service.*;
import com.blackhole.entities.Role;

@Controller
@RequestMapping("/admin")
public class AdminController {
	  
	@Autowired
	private AdminActionService adminActionService;
	
	//INDEX PAGE
	@RequestMapping(value= {""}, method = RequestMethod.GET)
	public String partnerIndexNULL(Model model) {
		return "Admin";
	}
	//get list staffs under role of admin
	@GetMapping("/list")
	public String list(Model model){
		// get staffs from dao
		List<EmployeeAccount> staffs = adminActionService.getStaffs();
		for (int i = 0; i<staffs.size(); i++) {
//			System.out.println(staffs.get(i).getRole().getRoleId().toString());
			Role role = adminActionService.getRole(staffs.get(i).getRole().getRoleId());
			Role roleToView = new Role();
			roleToView.setRoleId(role.getRoleId());
			roleToView.setRoleName(role.getRoleName());
//			System.out.println(role.getRoleDescription());
			
			staffs.get(i).setRole(roleToView);
		}
		
		
		// add the staffs to the model
		model.addAttribute("staffs", staffs);
		
		
		return "list-staffs";
  }
	
	//create new account employee
	@GetMapping("/showForm")
    public String showFormForAdd(Model theModel) {
        EmployeeAccount theStaff = new EmployeeAccount(); //Nếu người dùng từ chối tiếp tục, exit khỏi trang, theStaff này có tự destroy ?
        
        //get all role to choose one
        List<Role> roles = adminActionService.getAllRolesToCreateAccount();
        
        //get all field services
        List<FieldService> fields = adminActionService.getAllFieldsToCreateAccount();
             
       
        theModel.addAttribute("roles", roles);
        theModel.addAttribute("fields", fields);
        theModel.addAttribute("staff", theStaff);
        
        /*System.out.println(fields.get(0).getFserviceName());*/
        return "staff-form";
    }
	
	//SAVE THE STAFF
    @PostMapping("/saveStaff")
	public String saveStaff(@Validated EmployeeAccount theStaff, BindingResult result 
			) { //have to have BindingResult result
    	
    	System.out.println("=========================");
		System.out.println(theStaff.getEmpId());
		System.out.println(theStaff.getRole());
		System.out.println(theStaff.getEmpDob());
		System.out.println(theStaff.getEmployeeaccountByCreateBy());
		
		
		try {
			System.out.println("Create By : " );
			System.out.println(theStaff.getEmployeeaccountByCreateBy().getEmpId());
			System.out.println("=========================");
			System.out.println(theStaff.toString());
			adminActionService.saveStaff(theStaff);
			
		} catch (Exception e) {
			// TODO: handle exception
			System.out.println("Exeption : " + e.toString());
			return "redirect:/admin/updateForm?staffId="+theStaff.getEmpId().toString();
		}
		
		
		return "redirect:/admin/list";
	}

	//edit employee's profile
    @GetMapping("/updateForm")
    public String showFormForUpdate(@RequestParam("staffId") int theId, Model theModel) {
        EmployeeAccount theStaff = adminActionService.getStaff(theId);

        //get all role to choose one
        List<Role> roles = adminActionService.getAllRolesToCreateAccount();
        EmployeeAccount emplCreate = adminActionService.getStaff(theStaff.getEmployeeaccountByCreateBy().getEmpId());
        theStaff.setEmployeeaccountByCreateBy(emplCreate);
        
//        System.out.println(roles.get(0).getRoleId());
        System.out.println(theStaff.getEmpDob());
        theModel.addAttribute("staff", theStaff);
        theModel.addAttribute("roles", roles);
        
        return "staff-form";
    }

    @GetMapping("/delete")
    public String deleteCustomer(@RequestParam("staffId") int theId) {
//        adminActionService.deleteStaff(theId);
    	EmployeeAccount st = adminActionService.getStaff(theId);
    	System.out.println(st.getEmpFullName());
//    	System.out.println(st.toString());
    	st.setEmployeeaccountByCreateBy(null);
    	st.setEmpFullName("ABC");
    	adminActionService.saveStaff(st);
        return "redirect:/admin/list";
    }
}
